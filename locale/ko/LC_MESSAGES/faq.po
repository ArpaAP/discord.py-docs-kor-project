# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.4.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-27 13:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../faq.rst:5
msgid "Frequently Asked Questions"
msgstr "자주 묻는 질문"

#: ../../faq.rst:7
msgid ""
"This is a list of Frequently Asked Questions regarding using "
"``discord.py`` and its extension modules. Feel free to suggest a new "
"question or submit one via pull requests."
msgstr ""
"이 페이지는 ``discord.py``와 추가적인 모듈의 자주 묻는 질문의 목록이"
" 나열되어 있습니다. 언제든지 pull request를 통해 새로운 질문을"
" 제안하거나 제출하세요.

#: ../../faq.rst:11
msgid "Questions"
msgstr "질문"

#: ../../faq.rst:14
msgid "Coroutines"
msgstr "코루틴"

#: ../../faq.rst:16
msgid "Questions regarding coroutines and asyncio belong here."
msgstr "코루틴과 asyncio 관련 질문은 여기에 나열되어 있습니다."

#: ../../faq.rst:19
msgid "What is a coroutine?"
msgstr "코루틴이 뭔가요?"

#: ../../faq.rst:21
msgid ""
"A |coroutine_link|_ is a function that must be invoked with ``await`` or "
"``yield from``. When Python encounters an ``await`` it stops the "
"function's execution at that point and works on other things until it "
"comes back to that point and finishes off its work. This allows for your "
"program to be doing multiple things at the same time without using "
"threads or complicated multiprocessing."
msgstr ""
"|coroutine_link|_ 함수는 반드시 ``await`` 또는 ``yield from``과 함께 적용"
"되어야 합니다. Python은 ``await``와 맞닥뜨릴 경우 해당 함수의 실행을 중지하고"
" 다른 작업을 끝내고 다시 그 지점으로 돌아옵니다. 이것은 당신의 프로그램이"
" 쓰레드나 복잡한 멀티프로세싱 없이 여러 작업을 동시에 할 수 있게 만들어줍니다."

#: ../../faq.rst:26
msgid ""
"**If you forget to await a coroutine then the coroutine will not run. "
"Never forget to await a coroutine.**"
msgstr ""
"**만약 코루틴을 await 하는 것을 까먹었다면, 해당 코루틴은 실행되지 않습니다."
" 절대 코루틴을 await 하는 것을 잊지 마세요.**"

#: ../../faq.rst:29
msgid "Where can I use ``await``\\?"
msgstr "``await``\\을 어디에 사용할 수 있나요?"

#: ../../faq.rst:31
msgid ""
"You can only use ``await`` inside ``async def`` functions and nowhere "
"else."
msgstr ""
"``await``은 ``async def`` 함수 안에만 사용할 수 있습니다."

#: ../../faq.rst:34
msgid "What does \"blocking\" mean?"
msgstr "\"blocking\"의 뜻이 뭔가요?"

#: ../../faq.rst:36
msgid ""
"In asynchronous programming a blocking call is essentially all the parts "
"of the function that are not ``await``. Do not despair however, because "
"not all forms of blocking are bad! Using blocking calls is inevitable, "
"but you must work to make sure that you don't excessively block "
"functions. Remember, if you block for too long then your bot will freeze "
"since it has not stopped the function's execution at that point to do "
"other things."
msgstr ""

#: ../../faq.rst:41
msgid ""
"If logging is enabled, this library will attempt to warn you that "
"blocking is occurring with the message: ``Heartbeat blocked for more than"
" N seconds.`` See :ref:`logging_setup` for details on enabling logging."
msgstr ""

#: ../../faq.rst:45
msgid ""
"A common source of blocking for too long is something like "
":func:`time.sleep`. Don't do that. Use :func:`asyncio.sleep` instead. "
"Similar to this example: ::"
msgstr ""

#: ../../faq.rst:54
msgid ""
"Another common source of blocking for too long is using HTTP requests "
"with the famous module :doc:`req:index`. While :doc:`req:index` is an "
"amazing module for non-asynchronous programming, it is not a good choice "
"for :mod:`asyncio` because certain requests can block the event loop too "
"long. Instead, use the :doc:`aiohttp <aio:index>` library which is "
"installed on the side with this library."
msgstr ""

#: ../../faq.rst:59
msgid "Consider the following example: ::"
msgstr ""

#: ../../faq.rst:75
msgid "General"
msgstr "일반"

#: ../../faq.rst:77
msgid "General questions regarding library usage belong here."
msgstr "라이브러리와 관련된 일반적인 질문은 이쪽에 있습니다."

#: ../../faq.rst:80
msgid "Where can I find usage examples?"
msgstr "예시들을 어디서 볼 수 있나요?"

#: ../../faq.rst:82
msgid ""
"Example code can be found in the `examples folder "
"<https://github.com/Rapptz/discord.py/tree/master/examples>`_ in the "
"repository."
msgstr ""

#: ../../faq.rst:86
msgid "How do I set the \"Playing\" status?"
msgstr "봇의 \"하는 중\" 상태 메시지를 어디서 설정할 수 있나요?"

#: ../../faq.rst:88
msgid ""
"There is a method for this under :class:`Client` called "
":meth:`Client.change_presence`. The relevant aspect of this is its "
"``activity`` keyword argument which takes in an :class:`Activity` object."
msgstr ""

#: ../../faq.rst:91
msgid ""
"The status type (playing, listening, streaming, watching) can be set "
"using the :class:`ActivityType` enum. For memory optimisation purposes, "
"some activities are offered in slimmed down versions:"
msgstr ""

#: ../../faq.rst:94
msgid ":class:`Game`"
msgstr ""

#: ../../faq.rst:95
msgid ":class:`Streaming`"
msgstr ""

#: ../../faq.rst:97
msgid "Putting both of these pieces of info together, you get the following: ::"
msgstr ""

#: ../../faq.rst:106
msgid "How do I send a message to a specific channel?"
msgstr "어떻게 특정한 채널에 미시지를 보낼 수 있나요?"

#: ../../faq.rst:108
msgid ""
"You must fetch the channel directly and then call the appropriate method."
" Example: ::"
msgstr "채널의 정보(ID 등)을 바로 가져와 적절한 메서드를 호출해야 합니다."

#: ../../faq.rst:114
msgid "How do I send a DM?"
msgstr "어떻게 DM(개인 메시지)을 보낼 수 있나요?"

#: ../../faq.rst:116
msgid ""
"Get the :class:`User` or :class:`Member` object and call "
":meth:`abc.Messageable.send`. For example: ::"
msgstr ""

#: ../../faq.rst:121
msgid ""
"If you are responding to an event, such as :func:`on_message`, you "
"already have the :class:`User` object via :attr:`Message.author`: ::"
msgstr ""

#: ../../faq.rst:126
msgid "How do I get the ID of a sent message?"
msgstr "어떻게 보낸 메시지의 ID를 얻을 수 있나요?"

#: ../../faq.rst:128
msgid ""
":meth:`abc.Messageable.send` returns the :class:`Message` that was sent. "
"The ID of a message can be accessed via :attr:`Message.id`: ::"
msgstr ""

#: ../../faq.rst:135
msgid "How do I upload an image?"
msgstr "어떻게 이미지를 업로드할 수 있나요?"

#: ../../faq.rst:137
msgid "To upload something to Discord you have to use the :class:`File` object."
msgstr "디스코드에 무언가를 업로드하기 위해서는 :class:`File` 오브젝트를 활용해야 합니다."

#: ../../faq.rst:139
msgid ""
"A :class:`File` accepts two parameters, the file-like object (or file "
"path) and the filename to pass to Discord when uploading."
msgstr ""

#: ../../faq.rst:142
msgid "If you want to upload an image it's as simple as: ::"
msgstr ""

#: ../../faq.rst:146
msgid "If you have a file-like object you can do as follows: ::"
msgstr ""

#: ../../faq.rst:151
msgid ""
"To upload multiple files, you can use the ``files`` keyword argument "
"instead of ``file``\\: ::"
msgstr ""

#: ../../faq.rst:159
msgid ""
"If you want to upload something from a URL, you will have to use an HTTP "
"request using :doc:`aiohttp <aio:index>` and then pass an "
":class:`io.BytesIO` instance to :class:`File` like so:"
msgstr ""

#: ../../faq.rst:176
msgid "How can I add a reaction to a message?"
msgstr "어떻게 하면 메시지에 반응을 추가할 수 있나요?"

#: ../../faq.rst:178
msgid "You use the :meth:`Message.add_reaction` method."
msgstr ":meth:`Message.add_reaction` 메서드를 활용하세요."

#: ../../faq.rst:180
msgid ""
"If you want to use unicode emoji, you must pass a valid unicode code "
"point in a string. In your code, you can write this in a few different "
"ways:"
msgstr ""

#: ../../faq.rst:182
msgid "``'👍'``"
msgstr ""

#: ../../faq.rst:183
msgid "``'\\U0001F44D'``"
msgstr ""

#: ../../faq.rst:184
msgid "``'\\N{THUMBS UP SIGN}'``"
msgstr ""

#: ../../faq.rst:186 ../../faq.rst:202 ../../faq.rst:277 ../../faq.rst:293
#: ../../faq.rst:313
msgid "Quick example: ::"
msgstr "빠른 예시: ::"

#: ../../faq.rst:192
msgid ""
"In case you want to use emoji that come from a message, you already get "
"their code points in the content without needing to do anything special. "
"You **cannot** send ``':thumbsup:'`` style shorthands."
msgstr ""

#: ../../faq.rst:195
msgid ""
"For custom emoji, you should pass an instance of :class:`Emoji`. You can "
"also pass a ``'<:name:id>'`` string, but if you can use said emoji, you "
"should be able to use :meth:`Client.get_emoji` to get an emoji via ID or "
"use :func:`utils.find`/ :func:`utils.get` on :attr:`Client.emojis` or "
":attr:`Guild.emojis` collections."
msgstr ""

#: ../../faq.rst:199
msgid ""
"The name and ID of a custom emoji can be found with the client by "
"prefixing ``:custom_emoji:`` with a backslash. For example, sending the "
"message ``\\:python3:`` with the client will result in "
"``<:python3:232720527448342530>``."
msgstr ""

#: ../../faq.rst:219
msgid "How do I pass a coroutine to the player's \"after\" function?"
msgstr ""

#: ../../faq.rst:221
msgid ""
"The library's music player launches on a separate thread, ergo it does "
"not execute inside a coroutine. This does not mean that it is not "
"possible to call a coroutine in the ``after`` parameter. To do so you "
"must pass a callable that wraps up a couple of aspects."
msgstr ""

#: ../../faq.rst:225
msgid ""
"The first gotcha that you must be aware of is that calling a coroutine is"
" not a thread-safe operation. Since we are technically in another thread,"
" we must take caution in calling thread-safe operations so things do not "
"bug out. Luckily for us, :mod:`asyncio` comes with a "
":func:`asyncio.run_coroutine_threadsafe` function that allows us to call "
"a coroutine from another thread."
msgstr ""

#: ../../faq.rst:230
msgid ""
"However, this function returns a :class:`concurrent.Future` and to "
"actually call it we have to fetch its result. Putting all of this "
"together we can do the following: ::"
msgstr ""

#: ../../faq.rst:245
msgid "How do I run something in the background?"
msgstr ""

#: ../../faq.rst:247
msgid ""
"`Check the background_task.py example. "
"<https://github.com/Rapptz/discord.py/blob/master/examples/background_task.py>`_"
msgstr ""

#: ../../faq.rst:250
msgid "How do I get a specific model?"
msgstr ""

#: ../../faq.rst:252
msgid ""
"There are multiple ways of doing this. If you have a specific model's ID "
"then you can use one of the following functions:"
msgstr ""

#: ../../faq.rst:255
msgid ":meth:`Client.get_channel`"
msgstr ""

#: ../../faq.rst:256
msgid ":meth:`Client.get_guild`"
msgstr ""

#: ../../faq.rst:257
msgid ":meth:`Client.get_user`"
msgstr ""

#: ../../faq.rst:258
msgid ":meth:`Client.get_emoji`"
msgstr ""

#: ../../faq.rst:259
msgid ":meth:`Guild.get_member`"
msgstr ""

#: ../../faq.rst:260
msgid ":meth:`Guild.get_channel`"
msgstr ""

#: ../../faq.rst:261
msgid ":meth:`Guild.get_role`"
msgstr ""

#: ../../faq.rst:263
msgid "The following use an HTTP request:"
msgstr ""

#: ../../faq.rst:265
msgid ":meth:`abc.Messageable.fetch_message`"
msgstr ""

#: ../../faq.rst:266
msgid ":meth:`Client.fetch_user`"
msgstr ""

#: ../../faq.rst:267
msgid ":meth:`Client.fetch_guilds`"
msgstr ""

#: ../../faq.rst:268
msgid ":meth:`Client.fetch_guild`"
msgstr ""

#: ../../faq.rst:269
msgid ":meth:`Guild.fetch_emoji`"
msgstr ""

#: ../../faq.rst:270
msgid ":meth:`Guild.fetch_emojis`"
msgstr ""

#: ../../faq.rst:271
msgid ":meth:`Guild.fetch_member`"
msgstr ""

#: ../../faq.rst:274
msgid ""
"If the functions above do not help you, then use of :func:`utils.find` or"
" :func:`utils.get` would serve some use in finding specific models."
msgstr ""

#: ../../faq.rst:288
msgid "How do I make a web request?"
msgstr ""

#: ../../faq.rst:290
msgid ""
"To make a request, you should use a non-blocking library. This library "
"already uses and requires a 3rd party library for making requests, "
"``aiohttp``."
msgstr ""

#: ../../faq.rst:300
msgid ""
"See `aiohttp's full documentation "
"<http://aiohttp.readthedocs.io/en/stable/>`_ for more information."
msgstr ""

#: ../../faq.rst:303
msgid "How do I use a local image file for an embed image?"
msgstr ""

#: ../../faq.rst:305
msgid ""
"Discord special-cases uploading an image attachment and using it within "
"an embed so that it will not display separately, but instead in the "
"embed's thumbnail, image, footer or author icon."
msgstr ""

#: ../../faq.rst:308
msgid ""
"To do so, upload the image normally with :meth:`abc.Messageable.send`, "
"and set the embed's image URL to ``attachment://image.png``, where "
"``image.png`` is the filename of the image you will send."
msgstr ""

#: ../../faq.rst:322
msgid "Due to a Discord limitation, filenames may not include underscores."
msgstr ""

#: ../../faq.rst:325
msgid "Is there an event for audit log entries being created?"
msgstr ""

#: ../../faq.rst:327
msgid ""
"Since Discord does not dispatch this information in the gateway, the "
"library cannot provide this information. This is currently a Discord "
"limitation."
msgstr ""

#: ../../faq.rst:331
msgid "Commands Extension"
msgstr ""

#: ../../faq.rst:333
msgid "Questions regarding ``discord.ext.commands`` belong here."
msgstr ""

#: ../../faq.rst:336
msgid "Why does ``on_message`` make my commands stop working?"
msgstr ""

#: ../../faq.rst:338
msgid ""
"Overriding the default provided ``on_message`` forbids any extra commands"
" from running. To fix this, add a ``bot.process_commands(message)`` line "
"at the end of your ``on_message``. For example: ::"
msgstr ""

#: ../../faq.rst:348
msgid "Why do my arguments require quotes?"
msgstr ""

#: ../../faq.rst:350
msgid "In a simple command defined as: ::"
msgstr ""

#: ../../faq.rst:356
msgid ""
"Calling it via ``?echo a b c`` will only fetch the first argument and "
"disregard the rest. To fix this you should either call it via ``?echo \"a"
" b c\"`` or change the signature to have \"consume rest\" behaviour. "
"Example: ::"
msgstr ""

#: ../../faq.rst:363
msgid "This will allow you to use ``?echo a b c`` without needing the quotes."
msgstr ""

#: ../../faq.rst:366
msgid "How do I get the original ``message``\\?"
msgstr ""

#: ../../faq.rst:368
msgid ""
"The :class:`~ext.commands.Context` contains an attribute, "
":attr:`~.Context.message` to get the original message."
msgstr ""

#: ../../faq.rst:371 ../../faq.rst:383
msgid "Example: ::"
msgstr ""

#: ../../faq.rst:378
msgid "How do I make a subcommand?"
msgstr ""

#: ../../faq.rst:380
msgid ""
"Use the ``group`` decorator. This will transform the callback into a "
"``Group`` which will allow you to add commands into the group operating "
"as \"subcommands\". These groups can be arbitrarily nested as well."
msgstr ""

#: ../../faq.rst:394
msgid "This could then be used as ``?git push origin master``."
msgstr ""

